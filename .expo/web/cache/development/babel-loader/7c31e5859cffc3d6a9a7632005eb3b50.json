{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar url = \"http://194.31.79.154:6068\";\nvar getRequestOptions = {\n  method: \"GET\",\n  redirect: \"follow\",\n  mode: \"cors\"\n};\nexport function GetPlants() {\n  var result;\n  return _regeneratorRuntime.async(function GetPlants$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Plants/GetPlants\", getRequestOptions).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            return console.log(\"error\", error);\n          }));\n\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function GetPlantTypes() {\n  var result;\n  return _regeneratorRuntime.async(function GetPlantTypes$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/PlantTypes/GetPlantTypes\", getRequestOptions).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            return console.log(\"error\", error);\n          }));\n\n        case 2:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", result);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function GetAmbients() {\n  var result;\n  return _regeneratorRuntime.async(function GetAmbients$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Ambients/GetAmbients\", getRequestOptions).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            return console.log(\"error\", error);\n          }));\n\n        case 2:\n          result = _context3.sent;\n          return _context3.abrupt(\"return\", result);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function GetSoils() {\n  var result;\n  return _regeneratorRuntime.async(function GetSoils$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Soils/GetSoils\", getRequestOptions).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            return console.log(\"error\", error);\n          }));\n\n        case 2:\n          result = _context4.sent;\n          return _context4.abrupt(\"return\", result);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function GetLastMeasurement() {\n  var result;\n  return _regeneratorRuntime.async(function GetLastMeasurement$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Measurements/GetLastMeasurement\", getRequestOptions).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            return console.log(\"error\", error);\n          }));\n\n        case 2:\n          result = _context5.sent;\n          return _context5.abrupt(\"return\", result);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function GetAllMeasurementByPlantID(plantID) {\n  var result;\n  return _regeneratorRuntime.async(function GetAllMeasurementByPlantID$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Measurements/GetAllMeasurementByPlantID?plantID=\" + plantID, getRequestOptions).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            return console.log(\"error\", error);\n          }));\n\n        case 2:\n          result = _context6.sent;\n          return _context6.abrupt(\"return\", result);\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function GetAllMeasurementDateByPlantID(plantID, measurementDate) {\n  var myHeaders, raw, postRequestOptions, result;\n  return _regeneratorRuntime.async(function GetAllMeasurementDateByPlantID$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          myHeaders = new Headers();\n          myHeaders.append(\"Content-Type\", \"application/json\");\n          raw = JSON.stringify({\n            plantID: plantID,\n            measurementDate: measurementDate\n          });\n          postRequestOptions = {\n            method: \"POST\",\n            headers: myHeaders,\n            body: raw,\n            redirect: \"follow\"\n          };\n          _context7.next = 6;\n          return _regeneratorRuntime.awrap(fetch(url + \"/api/Measurements/GetAllMeasurementDateByIDQuery\", postRequestOptions).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            return console.log(\"error\", error);\n          }));\n\n        case 6:\n          result = _context7.sent;\n          return _context7.abrupt(\"return\", result);\n\n        case 8:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/rknyryn/Desktop/dijidom-mobile-app/api/Requests.js"],"names":["url","getRequestOptions","method","redirect","mode","GetPlants","fetch","then","response","json","catch","error","console","log","result","GetPlantTypes","GetAmbients","GetSoils","GetLastMeasurement","GetAllMeasurementByPlantID","plantID","GetAllMeasurementDateByPlantID","measurementDate","myHeaders","Headers","append","raw","JSON","stringify","postRequestOptions","headers","body"],"mappings":"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","sourcesContent":["var url = \"http://194.31.79.154:6068\";\n\nvar getRequestOptions = {\n  method: \"GET\",\n  redirect: \"follow\",\n  mode: \"cors\",\n};\n\nexport async function GetPlants() {\n  const result = await fetch(url + \"/api/Plants/GetPlants\", getRequestOptions)\n    .then((response) => response.json())\n    .catch((error) => console.log(\"error\", error));\n  return result;\n}\n\nexport async function GetPlantTypes() {\n  const result = await fetch(\n    url + \"/api/PlantTypes/GetPlantTypes\",\n    getRequestOptions\n  )\n    .then((response) => response.json())\n    .catch((error) => console.log(\"error\", error));\n  return result;\n}\n\nexport async function GetAmbients() {\n  const result = await fetch(\n    url + \"/api/Ambients/GetAmbients\",\n    getRequestOptions\n  )\n    .then((response) => response.json())\n    .catch((error) => console.log(\"error\", error));\n  return result;\n}\n\nexport async function GetSoils() {\n  const result = await fetch(url + \"/api/Soils/GetSoils\", getRequestOptions)\n    .then((response) => response.json())\n    .catch((error) => console.log(\"error\", error));\n  return result;\n}\n\nexport async function GetLastMeasurement() {\n  const result = await fetch(\n    url + \"/api/Measurements/GetLastMeasurement\",\n    getRequestOptions\n  )\n    .then((response) => response.json())\n    .catch((error) => console.log(\"error\", error));\n  return result;\n}\n\nexport async function GetAllMeasurementByPlantID(plantID) {\n  const result = await fetch(\n    url + \"/api/Measurements/GetAllMeasurementByPlantID?plantID=\" + plantID,\n    getRequestOptions\n  )\n    .then((response) => response.json())\n    .catch((error) => console.log(\"error\", error));\n  return result;\n}\n\nexport async function GetAllMeasurementDateByPlantID(plantID, measurementDate) {\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n\n  var raw = JSON.stringify({\n    plantID: plantID,\n    measurementDate: measurementDate,\n  });\n\n  var postRequestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: raw,\n    redirect: \"follow\",\n  };\n\n  const result = await fetch(\n    url + \"/api/Measurements/GetAllMeasurementDateByIDQuery\",\n    postRequestOptions\n  )\n    .then((response) => response.json())\n    .catch((error) => console.log(\"error\", error));\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}